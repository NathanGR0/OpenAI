{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar config = require('./config');\nvar axios = require('axios');\nvar DEFAULT_ENGINE = \"davinci\";\nvar OpenAI = /*#__PURE__*/function () {\n  function OpenAI(api_key) {\n    _classCallCheck(this, OpenAI);\n    this._api_key = api_key;\n  }\n  _createClass(OpenAI, [{\n    key: \"_send_request\",\n    value: function _send_request(url, method) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var camelToUnderscore = function camelToUnderscore(key) {\n        var result = key.replace(/([A-Z])/g, \" $1\");\n        return result.split(' ').join('_').toLowerCase();\n      };\n      var data = {};\n      for (var key in opts) {\n        data[camelToUnderscore(key)] = opts[key];\n      }\n      return axios({\n        url: url,\n        headers: {\n          'Authorization': \"Bearer \".concat(this._api_key),\n          'Content-Type': 'application/json'\n        },\n        data: Object.keys(data).length ? data : '',\n        method: method\n      });\n    }\n  }, {\n    key: \"_check_embeddings_engine_name\",\n    value: function _check_embeddings_engine_name(engine) {\n      var availableEngineNames = ['text-similarity-ada-001', 'text-similarity-babbage-001', 'text-similarity-curie-001', 'text-similarity-davinci-001', 'text-search-ada-doc-001', 'text-search-ada-query-001', 'text-search-babbage-doc-001', 'text-search-babbage-query-001', 'text-search-curie-doc-001', 'text-search-curie-query-001', 'text-search-davinci-doc-001', 'text-search-davinci-query-001', 'code-search-ada-code-001', 'code-search-ada-text-001', 'code-search-babbage-code-001', 'code-search-babbage-text-001'];\n      if (!availableEngineNames.includes(engine)) {\n        throw new Error(\"Unknown engine name for embeddings. Available engine names are \".concat(availableEngineNames));\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete(opts) {\n      var url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n      delete opts.engine;\n      return this._send_request(url, 'post', opts);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      // This method is no longer supported in Node>=v14. See\n      return Promise.resolve(new Array(2047).fill(\"\"));\n    }\n  }, {\n    key: \"search\",\n    value: function search(opts) {\n      var url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n      delete opts.engine;\n      return this._send_request(url, 'post', opts);\n    }\n  }, {\n    key: \"answers\",\n    value: function answers(opts) {\n      var url = config.answersUrl();\n      return this._send_request(url, 'post', opts);\n    }\n  }, {\n    key: \"classification\",\n    value: function classification(opts) {\n      var url = config.classificationsUrl();\n      return this._send_request(url, \"post\", opts);\n    }\n  }, {\n    key: \"engines\",\n    value: function engines() {\n      var url = config.enginesUrl();\n      return this._send_request(url, 'get');\n    }\n  }, {\n    key: \"engine\",\n    value: function engine(_engine) {\n      var url = config.engineUrl(_engine);\n      return this._send_request(url, 'get');\n    }\n  }, {\n    key: \"embeddings\",\n    value: function embeddings(opts) {\n      this._check_embeddings_engine_name(opts.engine);\n      var url = config.embeddingsUrl(opts.engine);\n      return this._send_request(url, 'post', opts);\n    }\n  }]);\n  return OpenAI;\n}();\nmodule.exports = OpenAI;","map":{"version":3,"names":["config","require","axios","DEFAULT_ENGINE","OpenAI","api_key","_api_key","url","method","opts","camelToUnderscore","key","result","replace","split","join","toLowerCase","data","headers","Object","keys","length","engine","availableEngineNames","includes","Error","completionURL","_send_request","Promise","resolve","Array","fill","searchURL","answersUrl","classificationsUrl","enginesUrl","engineUrl","_check_embeddings_engine_name","embeddingsUrl","module","exports"],"sources":["/Users/nathangage/Desktop/OpenAI/node_modules/openai-api/index.js"],"sourcesContent":["\"use strict\";\n\nconst config = require('./config');\nconst axios = require('axios');\n\nconst DEFAULT_ENGINE = \"davinci\";\n\nclass OpenAI {\n  constructor(api_key) {\n    this._api_key = api_key;\n  }\n\n  _send_request(url, method, opts = {}) {\n    let camelToUnderscore = (key) => {\n      let result = key.replace(/([A-Z])/g, \" $1\");\n      return result.split(' ').join('_').toLowerCase();\n    };\n\n    const data = {};\n    for (const key in opts) {\n      data[camelToUnderscore(key)] = opts[key];\n    }\n\n    return axios({\n      url,\n      headers: {\n        'Authorization': `Bearer ${this._api_key}`,\n        'Content-Type': 'application/json'\n      },\n      data: Object.keys(data).length ? data : '',\n      method,\n    });\n  }\n\n  _check_embeddings_engine_name(engine) {\n    const availableEngineNames = [\n      'text-similarity-ada-001',\n      'text-similarity-babbage-001',\n      'text-similarity-curie-001',\n      'text-similarity-davinci-001',\n      'text-search-ada-doc-001',\n      'text-search-ada-query-001',\n      'text-search-babbage-doc-001',\n      'text-search-babbage-query-001',\n      'text-search-curie-doc-001',\n      'text-search-curie-query-001',\n      'text-search-davinci-doc-001',\n      'text-search-davinci-query-001',\n      'code-search-ada-code-001',\n      'code-search-ada-text-001',\n      'code-search-babbage-code-001',\n      'code-search-babbage-text-001',\n    ];\n\n    if (!availableEngineNames.includes(engine)) {\n      throw new Error(`Unknown engine name for embeddings. Available engine names are ${availableEngineNames}`);\n    }\n  }\n\n  complete(opts) {\n    const url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n\n    return this._send_request(url, 'post', opts);\n  }\n\n  encode() {\n    // This method is no longer supported in Node>=v14. See\n    return Promise.resolve(new Array(2047).fill(\"\"));\n  }\n\n  search(opts) {\n    const url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n\n  answers(opts) {\n    const url = config.answersUrl();\n    return this._send_request(url, 'post', opts);\n  }\n\n  classification(opts) {\n    const url = config.classificationsUrl();\n    return this._send_request(url, \"post\", opts);\n  }\n\n  engines() {\n    const url = config.enginesUrl();\n    return this._send_request(url, 'get');\n  }\n\n  engine(engine) {\n    const url = config.engineUrl(engine);\n    return this._send_request(url, 'get');\n  }\n\n  embeddings(opts) {\n    this._check_embeddings_engine_name(opts.engine);\n\n    const url = config.embeddingsUrl(opts.engine);\n    return this._send_request(url, 'post', opts);\n  }\n}\n\nmodule.exports = OpenAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}