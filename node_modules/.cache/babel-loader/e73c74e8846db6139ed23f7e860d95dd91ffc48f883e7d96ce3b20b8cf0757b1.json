{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/nathangage/Desktop/OpenAI/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/nathangage/Desktop/OpenAI/src/components/AdGenerator.jsx\",\n  _s = $RefreshSig$();\nimport OpenAI from \"openai-api\";\nimport { useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form } from \"react-bootstrap\";\nimport Response from \"./Response\";\nimport Header from \"./Header\";\n\n// require(\"dotenv\").config();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar openai = new OpenAI(process.env.REACT_APP_OPENAI_API);\nexport default function AdGenerator() {\n  _s();\n  var _this = this;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    output = _useState2[0],\n    setOutput = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    result1 = _useState4[0],\n    setResult1 = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    result2 = _useState6[0],\n    setResult2 = _useState6[1];\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    result3 = _useState8[0],\n    setResult3 = _useState8[1];\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    result4 = _useState10[0],\n    setResult4 = _useState10[1];\n  var _useState11 = useState(),\n    _useState12 = _slicedToArray(_useState11, 2),\n    result5 = _useState12[0],\n    setResult5 = _useState12[1];\n  var inputRef = useRef();\n  var keywordRef = useRef();\n  var input = \"\";\n  function handleSubmit(submitEvent) {\n    // prevent reloading\n    submitEvent.preventDefault();\n    input = inputRef.current.value;\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var res, responseData, regex1, regex2, regex3, regex4, regex5, entry1, entry2, entry3, entry4, entry5;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return openai.complete({\n              engine: \"text-davinci-003\",\n              prompt: \"Write 5 Google Ads Headlines that are 30 characters each for the following product: \".concat(input),\n              maxTokens: 500,\n              temperature: 0.7,\n              topP: 1,\n              presencePenalty: 0,\n              frequencyPenalty: 0,\n              bestOf: 1\n            });\n          case 2:\n            res = _context.sent;\n            console.log(res);\n            responseData = res.data.choices[0].text;\n            console.log(responseData);\n            regex1 = \"(?=1)(.*)(?=)\";\n            regex2 = \"(?=2)(.*)(?=)\";\n            regex3 = \"(?=3)(.*)(?=)\";\n            regex4 = \"(?=4)(.*)(?=)\";\n            regex5 = \"(?=5)(.*)(?=)\";\n            entry1 = responseData.match(regex1)[0];\n            entry2 = responseData.match(regex2)[0];\n            entry3 = responseData.match(regex3)[0];\n            entry4 = responseData.match(regex4)[0];\n            entry5 = responseData.match(regex5)[0];\n            setOutput(function (prevOutputs) {\n              return [{\n                response1: entry1,\n                prompt: input,\n                response2: entry2,\n                response3: entry3,\n                response4: entry4,\n                response5: entry5\n              }].concat(_toConsumableArray(prevOutputs));\n            });\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"Create Google Ads Headlines\",\n          ref: inputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"Keywords\",\n          ref: keywordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Generate Headlines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), output.map(function (responseItem, index) {\n      return /*#__PURE__*/_jsxDEV(Response, {\n        id: index,\n        content: responseItem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, _this);\n    })]\n  }, void 0, true);\n}\n_s(AdGenerator, \"xQfX3EhjbXBufZHve6FgANjL0W8=\");\n_c = AdGenerator;\nvar _c;\n$RefreshReg$(_c, \"AdGenerator\");","map":{"version":3,"names":["OpenAI","useState","useRef","Button","Form","Response","Header","openai","process","env","REACT_APP_OPENAI_API","AdGenerator","output","setOutput","result1","setResult1","result2","setResult2","result3","setResult3","result4","setResult4","result5","setResult5","inputRef","keywordRef","input","handleSubmit","submitEvent","preventDefault","current","value","complete","engine","prompt","maxTokens","temperature","topP","presencePenalty","frequencyPenalty","bestOf","res","console","log","responseData","data","choices","text","regex1","regex2","regex3","regex4","regex5","entry1","match","entry2","entry3","entry4","entry5","prevOutputs","response1","response2","response3","response4","response5","map","responseItem","index"],"sources":["/Users/nathangage/Desktop/OpenAI/src/components/AdGenerator.jsx"],"sourcesContent":["import OpenAI from \"openai-api\";\nimport { useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form } from \"react-bootstrap\";\n\nimport Response from \"./Response\";\nimport Header from \"./Header\";\n\n// require(\"dotenv\").config();\nconst openai = new OpenAI(process.env.REACT_APP_OPENAI_API);\n\nexport default function AdGenerator() {\n  const [output, setOutput] = useState([]);\n  const [result1, setResult1] = useState();\n  const [result2, setResult2] = useState();\n  const [result3, setResult3] = useState();\n  const [result4, setResult4] = useState();\n  const [result5, setResult5] = useState();\n  const inputRef = useRef();\n  const keywordRef = useRef();\n  let input = \"\";\n  function handleSubmit(submitEvent) {\n    // prevent reloading\n    submitEvent.preventDefault();\n    input = inputRef.current.value;\n    (async () => {\n      const res = await openai.complete({\n        engine: \"text-davinci-003\",\n        prompt: `Write 5 Google Ads Headlines that are 30 characters each for the following product: ${input}`,\n        maxTokens: 500,\n        temperature: 0.7,\n        topP: 1,\n        presencePenalty: 0,\n        frequencyPenalty: 0,\n        bestOf: 1,\n      });\n\n      console.log(res);\n\n      let responseData = res.data.choices[0].text;\n\n      console.log(responseData);\n\n      const regex1 = `(?=1)(.*)(?=)`;\n      const regex2 = `(?=2)(.*)(?=)`;\n      const regex3 = `(?=3)(.*)(?=)`;\n      const regex4 = `(?=4)(.*)(?=)`;\n      const regex5 = `(?=5)(.*)(?=)`;\n      const entry1 = responseData.match(regex1)[0];\n      const entry2 = responseData.match(regex2)[0];\n      const entry3 = responseData.match(regex3)[0];\n      const entry4 = responseData.match(regex4)[0];\n      const entry5 = responseData.match(regex5)[0];\n\n      setOutput((prevOutputs) => {\n        return [\n          {\n            response1: entry1,\n            prompt: input,\n            response2: entry2,\n            response3: entry3,\n            response4: entry4,\n            response5: entry5,\n          },\n          ...prevOutputs,\n        ];\n      });\n    })();\n  }\n\n  return (\n    <>\n      <Header />\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Control\n            placeholder=\"Create Google Ads Headlines\"\n            ref={inputRef}\n          />\n          <Form.Control placeholder=\"Keywords\" ref={keywordRef} />\n          <Button type=\"submit\">Generate Headlines</Button>\n        </Form.Group>\n      </Form>\n      {output.map((responseItem, index) => {\n        return <Response key={index} id={index} content={responseItem} />;\n      })}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}